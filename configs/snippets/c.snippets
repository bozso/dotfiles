# General

snippet main
	int main(int argc, char *argv[])
	{
		${0}
		return 0;
	}

snippet todo
	/*! TODO: ${1:Todo description here}
	 *  \todo $1
	 */

# Preprocessor

snippet nocxx
	#ifdef __cplusplus
	extern "C" {
	#endif

	${0}

	#ifdef __cplusplus
	} /* extern "C" */
	#endif


snippet inc
	#include <${1:stdio}.h>

snippet def
	#define

snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif

snippet #if
	#if ${1:FOO}
		${0:${VISUAL}}
	#endif

snippet once
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${0}

	#endif /* end of include guard: $1 */


# Control Statements

snippet if
	if (${1:true}) {
		${0:${VISUAL}}
	}
snippet ife
	if (${1:true}) {
		${2:${VISUAL}}
	} else {
		${0}
	}

snippet el
	else {
		${0:${VISUAL}}
	}

snippet elif
	else if (${1:true}) {
		${0:${VISUAL}}
	}

snippet switch
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
		default:
			${6}
	}

snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}


# Loops

snippet for
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}

snippet while
	while (${1:/* condition */}) {
		${0:${VISUAL}}
	}

snippet do
	do {
		${0:${VISUAL}}
	} while (${1:/* condition */});


# Functions

snippet fun
	/*! @brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * @return ${3:Return parameter description}
	 */
	${4:void} ${5:function_name}(${6})
	{
		${7}
	}


# Types

snippet td
	typedef ${1:int} ${2:MyCustomType};

snippet struct
	/*! @struct $1
	 *  @brief ${3:Brief struct description}
	 *
	 *  ${4:Detailed description}
	 */
	struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
		${2:Data} /*!< ${4:Description} */
	};

snippet tstruct
	/*! @struct $2
	 *  @brief ${5:Brief struct description}
	 *
	 *  ${6:Detailed description}
	 */
	typedef struct ${2:_$1 }{
		m_${3:Data} /*!< ${4:Description} */
	} ${1:`vim_snippets#Filename('$1_t', 'name')`};

snippet enum
	/*! @enum $1
	 *
	 *  ${2:Detailed description}
	 */
	enum ${1:name} { ${0} };

snippet tenum
	/*! @enum $2
	 *
	 *  ${4:Detailed description}
	 */
	typedef enum {
		${1:Data} /*!< ${3:Description} */
	} ${2:foo};
